#!/bin/bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e            # fail fast
set -o pipefail   # do not ignore exit codes when piping output

# Heroku-provided params
BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"

POSTGREST_VER=${POSTGREST_VER:-0.3.1.0}
CLEAR_CACHE=${CLEAR_CACHE:-0}

PATH="$BUILD_DIR/local/bin:$PATH"

export PERL5LIB="$BUILD_DIR/local/lib/perl5"
export PERL_CPANM_OPT="--quiet --notest -l $BUILD_DIR/local"

rm -rf $BUILD_DIR/local

legacyMode() {
  [[ $POSTGREST_VER == "0.2*" ]]
}

indent() {
  sed -u 's/^/       /'
}

export_env_dir() {
  local env_dir=${1:-$ENV_DIR}
  local whitelist_regex=${2:-''}
  local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|BUILDPACK_URL)$'}

  if [ -d "$env_dir" ]; then
    echo "-----> Exporting config vars"
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        echo "       $e" &&
        export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir

if [[ $CLEAR_CACHE -eq 1 ]] ; then
  echo "-----> Clearing the buildpack cache"
  rm -fr $CACHE_DIR/
fi

############# LIBRARY FILES ###############################

if [ ! -e $CACHE_DIR/ghc-libs ]; then
  LIBS_URL="http://bin.begriffs.com/dbapi/heroku/ghc-libs.tar.xz"
  if curl --output /dev/null --silent --head --fail $LIBS_URL; then
    echo "-----> Downloading and caching libraries for POSTGREST"
    mkdir -p $CACHE_DIR
    curl -# -L $LIBS_URL | tar xJ -C $CACHE_DIR
    cp -R $CACHE_DIR/ghc-libs $BUILD_DIR
  else
    echo "-----> Could not find prebuilt libraries"
    exit 1
  fi
else
  echo "-----> Restoring cached libraries"
  cp -R $CACHE_DIR/ghc-libs $BUILD_DIR
fi

############# DBAPI BINARY ################################

if legacyMode; then
  BIN="postgrest-${POSTGREST_VER}"
else
  BIN="postgrest"
fi
FILE="postgrest-${POSTGREST_VER}"

if [ ! -e $CACHE_DIR/$BIN ]; then
  BIN_URL="http://bin.begriffs.com/dbapi/heroku/${FILE}.tar.xz"
  if curl --output /dev/null --silent --head --fail $BIN_URL; then
    echo "-----> Downloading and caching POSTGREST $POSTGREST_VER binary"
    mkdir -p $CACHE_DIR
    curl -# -L $BIN_URL | tar xJ -C $CACHE_DIR
  else
    echo "-----> Could not find prebuilt $BIN"
    exit 1
  fi
fi

echo "-----> Restoring cached $BIN"
cp -R $CACHE_DIR/$BIN $BUILD_DIR

echo "-----> Creating Procfile"
if legacyMode; then
  cat <<EOF > $BUILD_DIR/Procfile
web: ./${BIN} -p \$PORT -s -d \$DB_NAME -U \$AUTH_ROLE --db-pass \$AUTH_PASS -a \$ANONYMOUS_ROLE --db-host \$DB_HOST -P \$DB_PORT --db-pool \$DB_POOL --jwt-secret \$JWT_SECRET --v1schema \$SCHEMA
EOF
else
  if [ "${DATABASE_URL}x" != "x" ]; then
    cat <<EOF > $BUILD_DIR/Procfile
web: ./${BIN} $DATABASE_URL -p \$PORT -a \$ANONYMOUS_ROLE --pool \$DB_POOL --jwt-secret \$JWT_SECRET --schema \$SCHEMA
EOF
  else
    cat <<EOF > $BUILD_DIR/Procfile
web: ./${BIN} postgres://$AUTH_ROLE:$AUTH_PASS@$DB_HOST:$DB_PORT/$DB_NAME -p \$PORT -a \$ANONYMOUS_ROLE --pool \$DB_POOL --jwt-secret \$JWT_SECRET --schema \$SCHEMA
EOF
  fi
fi

echo "-----> Persisting settings"
PROFILE_PATH="$BUILD_DIR/.profile.d/dbapi.sh"
mkdir -p $(dirname $PROFILE_PATH)
# Usage: $ set-default-env key value
function set-default-env (){
  echo "export $1=\${$1:-$2}" >> $PROFILE_PATH
}

set-default-env LD_LIBRARY_PATH /app/ghc-libs:/usr/lib

echo "-----> Add cpanm"

cd $BUILD_DIR

cat << EOF > "$BUILD_DIR/.profile.d/perl.sh"
PATH="/app/local/bin:\$PATH"
export PERL5LIB="/app/local/lib/perl5"
EOF

perl -v | grep -A 1 "This is perl" | indent

if ! [ -e $BUILD_DIR/local/bin/cpanm ]; then
  echo "-----> Bootstrapping cpanm"
  curl -L --silent https://raw.github.com/miyagawa/cpanminus/master/cpanm | perl - App::cpanminus 2>&1 | indent
fi

echo "-----> Add sqitch"
cpanm App::Sqitch DBD::Pg

if [ -d $BUILD_DIR/local ]; then
  rm -rf $CACHE_DIR/local
  mkdir -p $CACHE_DIR
  cp -a $BUILD_DIR/local $CACHE_DIR/local
fi
echo "-----> ❤ stay declarative ❤"

